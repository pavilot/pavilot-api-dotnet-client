<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pavilot.Api.Client</name>
    </assembly>
    <members>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsGetAsync">
            <summary>Projects</summary>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsGetAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Projects</summary>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsGetAsync(System.String)">
            <summary>Project</summary>
            <param name="projectId">Project Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsGetAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Project</summary>
            <param name="projectId">Project Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsGetAsync(System.String)">
            <summary>Animations</summary>
            <param name="projectId">Project Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsGetAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Animations</summary>
            <param name="projectId">Project Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsGetAsync(System.String,System.String)">
            <summary>Animation</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsGetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Animation</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsVideosGetAsync(System.String,System.String,System.Nullable{System.Int32})">
            <summary>Videos</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsVideosGetAsync(System.String,System.String,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Videos</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsVideosPostAsync(System.String,System.String,Pavilot.Api.Client.ExportRequest)">
            <summary>Video</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="body">Details</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsVideosPostAsync(System.String,System.String,Pavilot.Api.Client.ExportRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Video</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="body">Details</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsVideosGetAsync(System.String,System.String,System.String)">
            <summary>Video</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="videoId">Video Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsVideosGetAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Video</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="videoId">Video Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsVideosDeleteAsync(System.String,System.String,System.String)">
            <summary>Video</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="videoId">Video Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsVideosDeleteAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Video</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="videoId">Video Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsImagesGetAsync(System.String,System.String)">
            <summary>Images</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsImagesGetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Images</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsImagesPostAsync(System.String,System.String,System.IO.FileStream)">
            <summary>Image</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsImagesPostAsync(System.String,System.String,System.IO.FileStream,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Image</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsFontsGetAsync(System.String,System.String)">
            <summary>Fonts</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsFontsGetAsync(System.String,System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Fonts</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsFontsPostAsync(System.String,System.String,System.IO.FileStream)">
            <summary>Font</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsAnimationsFontsPostAsync(System.String,System.String,System.IO.FileStream,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Font</summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsHooksGetAsync(System.String)">
            <summary>List</summary>
            <param name="projectId">Project Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsHooksGetAsync(System.String,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>List</summary>
            <param name="projectId">Project Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsHooksPostAsync(System.String,Pavilot.Api.Client.HookRequest)">
            <summary>Add</summary>
            <param name="projectId">Project Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsHooksPostAsync(System.String,Pavilot.Api.Client.HookRequest,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Add</summary>
            <param name="projectId">Project Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsHooksGetAsync(System.String,System.Int32)">
            <summary>Get</summary>
            <param name="projectId">Project Id</param>
            <param name="hookId">Hook Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsHooksGetAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Get</summary>
            <param name="projectId">Project Id</param>
            <param name="hookId">Hook Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsHooksDeleteAsync(System.String,System.Int32)">
            <summary>Delete</summary>
            <param name="projectId">Project Id</param>
            <param name="hookId">Hook Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsHooksDeleteAsync(System.String,System.Int32,System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Delete</summary>
            <param name="projectId">Project Id</param>
            <param name="hookId">Hook Id</param>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsSampleHooksAsync">
            <summary>Sample hooks</summary>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotClient.V1ProjectsSampleHooksAsync(System.Threading.CancellationToken)">
            <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            <summary>Sample hooks</summary>
            <returns>Success</returns>
            <exception cref="T:Pavilot.Api.Client.ApiException">A server side error occurred.</exception>
        </member>
        <member name="T:Pavilot.Api.Client.Animation">
            <summary>Animation</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Animation.Id">
            <summary>Animation Id</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Animation.ProjectId">
            <summary>Project Id</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Animation.CreateDate">
            <summary>Created Date</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Animation.Name">
            <summary>Name</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Animation.Duration">
            <summary>Duration (in seconds)</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Animation.Tags">
            <summary>Tags</summary>
        </member>
        <member name="T:Pavilot.Api.Client.Asset">
            <summary>Saved Asset</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Asset.Filename">
            <summary>Filename</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Asset.Filepath">
            <summary>Filepath</summary>
        </member>
        <member name="P:Pavilot.Api.Client.ConnectionsStatus.Twitter">
            <summary>Is Twitter connected</summary>
        </member>
        <member name="P:Pavilot.Api.Client.ConnectionsStatus.Facebook">
            <summary>Is Facebook connected</summary>
        </member>
        <member name="P:Pavilot.Api.Client.ConnectionsStatus.Hooks">
            <summary>Any hooks connected</summary>
        </member>
        <member name="T:Pavilot.Api.Client.Hook">
            <summary>Hook</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Hook.Id">
            <summary>Hook Id</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Hook.ProjectId">
            <summary>Project Id</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Hook.IsPaused">
            <summary>Trigger paused state</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Hook.Url">
            <summary>Hook subscription URL</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Hook.Source">
            <summary>Source for hook request</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Hook.AnimationEvents">
            <summary>Trigger hook on animation events</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Hook.AnimationFilter">
            <summary>Apply only specified animations (comma-separated list)</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Hook.VideoEvents">
            <summary>Trigger hook on video events</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Hook.VideoStatusFilter">
            <summary>Apply only on specified video statuses (comma-separated list)</summary>
        </member>
        <member name="T:Pavilot.Api.Client.HookRequest">
            <summary>Hook request</summary>
        </member>
        <member name="P:Pavilot.Api.Client.HookRequest.Url">
            <summary>Hook subscription URL</summary>
        </member>
        <member name="P:Pavilot.Api.Client.HookRequest.Source">
            <summary>Source for hook request</summary>
        </member>
        <member name="P:Pavilot.Api.Client.HookRequest.AnimationEvents">
            <summary>Trigger hook on animation events</summary>
        </member>
        <member name="P:Pavilot.Api.Client.HookRequest.AnimationFilter">
            <summary>Apply only specified animations (comma-separated list)</summary>
        </member>
        <member name="P:Pavilot.Api.Client.HookRequest.VideoEvents">
            <summary>Trigger hook on video events</summary>
        </member>
        <member name="P:Pavilot.Api.Client.HookRequest.VideoStatusFilter">
            <summary>Apply only on specified video statuses (comma-separated list)</summary>
        </member>
        <member name="T:Pavilot.Api.Client.Project">
            <summary>Project</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Project.Id">
            <summary>Project Id</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Project.CreateDate">
            <summary>Created Date</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Project.Name">
            <summary>Name</summary>
        </member>
        <member name="T:Pavilot.Api.Client.Video">
            <summary>Video</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Video.Id">
            <summary>Video Id</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Video.AnimationId">
            <summary>Animation Id</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Video.CreateDate">
            <summary>Created Date</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Video.Name">
            <summary>Name</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Video.Output">
            <summary>Output Path</summary>
        </member>
        <member name="P:Pavilot.Api.Client.Video.Thumbnail">
            <summary>Thumbnail path</summary>
        </member>
        <member name="T:Pavilot.Api.Client.IPavilotService">
            <summary>
            Pavilot Service
            Methods for api communication
            </summary>
        </member>
        <member name="P:Pavilot.Api.Client.IPavilotService.PavilotClient">
            <summary>
            Generated Client
            </summary>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.VerifyAndSetupClient">
            <summary>
            Verify settings and initialize Pavilot Client
            </summary>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.IsValid">
            <summary>
            Validates Pavilot communication configuration.
            Throws ArgumentException if any of the settings is not valid. 
            Throws ArgumentNullException if any of the settings is missing.
            </summary>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.GetProjectsAsync">
            <summary>
            Retrieves all projects
            </summary>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.GetAnimationsAsync(System.String)">
            <summary>
            Retrieves animations of a project
            </summary>
            <param name="projectId">Project Id</param>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.GetVideosAsync(System.String,System.String,System.Int32)">
            <summary>
            Retrieves videos of an animation
            Order is reversed, page 0 retrieves latest generated videos
            </summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="page">Page</param>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.GetVideoAsync(System.String,System.String,System.String)">
            <summary>
            Retrieve video to have status details
            </summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="videoId">Video Id</param>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.DeleteVideoAsync(System.String,System.String,System.String)">
            <summary>
            Delete video with all files
            </summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="videoId">Video Id</param>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.ExportAsync(System.String,System.String,Pavilot.Api.Client.ExportRequest)">
            <summary>
            Export a new video with updated data
            </summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="request">Mappings and distribution details</param>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.GetImages(System.String,System.String)">
            <summary>
            Get images of the animation
            </summary>
            <param name="projectId"></param>
            <param name="animationId"></param>
            <returns>Asset info with filename and filepath for mapping</returns>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.PostImage(System.String,System.String,System.IO.FileStream)">
            <summary>
            Upload new image for the animation
            </summary>
            <param name="projectId"></param>
            <param name="animationId"></param>
            <param name="file">File stream</param>
            <returns>Asset info with filename for mapping</returns>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.GetFonts(System.String,System.String)">
            <summary>
            Get existing fonts of the animation
            </summary>
            <param name="projectId"></param>
            <param name="animationId"></param>
            <returns>Asset info with filename and filepath for mapping</returns>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.PostFont(System.String,System.String,System.IO.FileStream)">
            <summary>
            Upload new font for the animation
            </summary>
            <param name="projectId"></param>
            <param name="animationId"></param>
            <param name="file">File stream</param>
            <returns>Asset info with filename for mapping</returns>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.HookSubscribeAsync(System.String,Pavilot.Api.Client.HookRequest)">
            <summary>
            Subscribe rest hook to receive updates
            </summary>
            <param name="projectId">Project Id</param>
            <param name="request">Hook filter</param>
        </member>
        <member name="M:Pavilot.Api.Client.IPavilotService.HookUnsubscribeAsync(System.String,System.Int32)">
            <summary>
            Unsubscribe rest hook to stop receiving updates
            </summary>
            <param name="projectId">Project Id</param>
            <param name="hookId">Hook Id</param>
        </member>
        <member name="T:Pavilot.Api.Client.PavilotService">
            <summary>
            Pavilot Service
            </summary>
        </member>
        <member name="P:Pavilot.Api.Client.PavilotService.PavilotClient">
            <summary>
            Generated Client
            </summary>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor
            </summary>
            <param name="configuration">Configuration reference to read settings</param>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.#ctor(Pavilot.Api.Client.IPavilotSettings)">
            <summary>
            Constructor
            </summary>
            <param name="settings">Pavilot settings</param>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.VerifyAndSetupClient">
            <summary>
            Verify settings and initialize Pavilot Client
            </summary>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.IsValid">
            <summary>
            Validates Pavilot communication configuration.
            Throws ArgumentException if any of the settings is not valid. 
            Throws ArgumentNullException if any of the settings is missing.
            </summary>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.GetProjectsAsync">
            <summary>
            Retrieves all projects
            </summary>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.GetAnimationsAsync(System.String)">
            <summary>
            Retrieves animations of a project
            </summary>
            <param name="projectId">Project Id</param>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.GetVideosAsync(System.String,System.String,System.Int32)">
            <summary>
            Retrieves videos of an animation
            Order is reversed, page 0 retrieves latest generated videos
            </summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="page">Page</param>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.GetVideoAsync(System.String,System.String,System.String)">
            <summary>
            Retrieve video to have status details
            </summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="videoId">Video Id</param>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.DeleteVideoAsync(System.String,System.String,System.String)">
            <summary>
            Delete video with all files
            </summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="videoId">Video Id</param>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.ExportAsync(System.String,System.String,Pavilot.Api.Client.ExportRequest)">
            <summary>
            Export a new video with updated data
            </summary>
            <param name="projectId">Project Id</param>
            <param name="animationId">Animation Id</param>
            <param name="request">Mappings and distribution details</param>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.GetImages(System.String,System.String)">
            <summary>
            Get images of the animation
            </summary>
            <param name="projectId"></param>
            <param name="animationId"></param>
            <returns>Asset info with filename and filepath for mapping</returns>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.PostImage(System.String,System.String,System.IO.FileStream)">
            <summary>
            Upload new image for the animation
            </summary>
            <param name="projectId"></param>
            <param name="animationId"></param>
            <param name="file">File stream</param>
            <returns>Asset info with filename for mapping</returns>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.GetFonts(System.String,System.String)">
            <summary>
            Get existing fonts of the animation
            </summary>
            <param name="projectId"></param>
            <param name="animationId"></param>
            <returns>Asset info with filename and filepath for mapping</returns>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.PostFont(System.String,System.String,System.IO.FileStream)">
            <summary>
            Upload new font for the animation
            </summary>
            <param name="projectId"></param>
            <param name="animationId"></param>
            <param name="file">File stream</param>
            <returns>Asset info with filename for mapping</returns>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.HookSubscribeAsync(System.String,Pavilot.Api.Client.HookRequest)">
            <summary>
            Subscribe rest hook to receive updates
            </summary>
            <param name="projectId">Project Id</param>
            <param name="request">Hook filter</param>
        </member>
        <member name="M:Pavilot.Api.Client.PavilotService.HookUnsubscribeAsync(System.String,System.Int32)">
            <summary>
            Unsubscribe rest hook to stop receiving updates
            </summary>
            <param name="projectId">Project Id</param>
            <param name="hookId">Hook Id</param>
        </member>
        <member name="T:Pavilot.Api.Client.IPavilotSettings">
            <summary>
            Pavilot settings interface
            </summary>
        </member>
        <member name="P:Pavilot.Api.Client.IPavilotSettings.ApiEndpoint">
            <summary>
            Base url address for api
            e.g: https://v1.pavilot.com
            </summary>
        </member>
        <member name="P:Pavilot.Api.Client.IPavilotSettings.ApiKey">
            <summary>
            Api Subscription Key
            </summary>
        </member>
        <member name="T:Pavilot.Api.Client.PavilotSettings">
            <summary>
            Pavilot settings
            </summary>
        </member>
        <member name="P:Pavilot.Api.Client.PavilotSettings.ApiEndpoint">
            <summary>
            Base url address for api
            e.g: https://v1.pavilot.com
            </summary>
        </member>
        <member name="P:Pavilot.Api.Client.PavilotSettings.ApiKey">
            <summary>
            Api Subscription Key
            </summary>
        </member>
        <member name="T:Pavilot.Api.Client.StartupExtensions">
            <summary>
            Startup Extension for easy integration
            </summary>
        </member>
        <member name="M:Pavilot.Api.Client.StartupExtensions.AddPavilot(Microsoft.Extensions.DependencyInjection.IServiceCollection,Pavilot.Api.Client.PavilotSettings)">
            <summary>
            Register PavilotService. Please use IPavilotService 
            </summary>
            <param name="services"></param>
            <param name="settings">Pavilot Settings</param>
            <returns></returns>
        </member>
    </members>
</doc>
